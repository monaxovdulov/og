from __future__ import annotations
from typing import Final
from telebot.apihelper import ApiTelegramException
from .core import bot, logger
from .keyboards import (
    kb_main_menu, kb_play_menu, kb_settings_menu, kb_topics_page,
    kb_question_controls, kb_confirm_skip, kb_results,
    NS_MENU, NS_PLAY, NS_TOPICS, NS_SETTINGS, NS_QUESTION, NS_NAV,
    Topic, Prefs,
)

# --- In-memory "repos" (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –¥–ª—è –¥–µ–º–æ) ---
PREFS: dict[int, Prefs] = {}
LAST_TOPIC_BY_USER: dict[int, str] = {}
HAS_RESUME: dict[int, bool] = {}  # –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Å–µ—Ä–∏—è

# –¥–µ–º–æ-–±–∞–Ω–∫ —Ç–µ–º
ALL_TOPICS: list[Topic] = [
    {"id": "py-basics", "title": "Python –æ—Å–Ω–æ–≤—ã", "emoji": "üêç"},
    {"id": "alg", "title": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "emoji": "üß†"},
    {"id": "db", "title": "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "emoji": "üóÑ"},
    {"id": "net", "title": "–°–µ—Ç–∏", "emoji": "üåê"},
    {"id": "os", "title": "–û–°", "emoji": "üñ•"},
    {"id": "linux", "title": "Linux", "emoji": "üêß"},
    {"id": "git", "title": "Git", "emoji": "üå≥"},
    {"id": "tlgrm", "title": "Telegram", "emoji": "‚úâÔ∏è"},
    {"id": "async", "title": "Async", "emoji": "‚ö°"},
    {"id": "tests", "title": "–¢–µ—Å—Ç—ã", "emoji": "‚úÖ"},
]

# --- UI helpers ---
def _reply_user_id(ctx) -> int:
    # –µ—Å–ª–∏ –Ω–µ—Ç chat_id (inline), —à–ª—ë–º –≤ –ª–∏—á–∫—É –ø–æ user_id
    return ctx.chat_id or ctx.user_id

def _is_not_modified(err: Exception) -> bool:
    """True, –µ—Å–ª–∏ Telegram –≤–µ—Ä–Ω—É–ª 'message is not modified' (–¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ markup)."""
    if not isinstance(err, ApiTelegramException):
        return False
    desc = (getattr(err, "description", "") or "").lower()
    # –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    return "message is not modified" in desc or "message not modified" in desc

def _safe_edit_text(ctx, *, text: str, reply_markup=None) -> None:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    """
    if ctx.chat_id and ctx.message_id:
        try:
            bot.edit_message_text(
                text=text, chat_id=ctx.chat_id, message_id=ctx.message_id, reply_markup=reply_markup
            )
            return
        except Exception as e:
            # –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –¥—É–±–ª—è–∂–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if _is_not_modified(e):
                logger.debug("skip send: message is not modified")
                return
            # –ø—Ä–æ—á–∏–µ –ø—Ä–∏—á–∏–Ω—ã ‚Äî –ø–∞–¥–∞–µ–º –≤ fallback (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'message to edit not found')
            logger.debug("edit_message_text failed, fallback to send: %r", e)
    bot.send_message(_reply_user_id(ctx), text, reply_markup=reply_markup)

def _safe_edit_kb(ctx, *, reply_markup) -> None:
    """
    –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É; –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    if ctx.chat_id and ctx.message_id:
        try:
            bot.edit_message_reply_markup(chat_id=ctx.chat_id, message_id=ctx.message_id, reply_markup=reply_markup)
            return
        except Exception as e:
            if _is_not_modified(e):
                logger.debug("skip send: reply_markup is not modified")
                return
            logger.debug("edit_message_reply_markup failed, fallback to send: %r", e)
    # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(_reply_user_id(ctx), "–û–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=reply_markup)

def _get_prefs(user_id: int) -> Prefs:
    return PREFS.setdefault(user_id, {"qcount": 5, "diff": "m", "sol": "imm"})

# --- Menu handlers ---
def handle_m_play(ctx) -> None:
    has_resume = HAS_RESUME.get(ctx.user_id, False)
    _safe_edit_text(ctx, text="<b>–ò–≥—Ä–∞—Ç—å</b>", reply_markup=kb_play_menu(has_resume=has_resume))

def handle_m_rating(ctx) -> None:
    _safe_edit_text(ctx, text="<b>–†–µ–π—Ç–∏–Ω–≥</b>\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥.", reply_markup=kb_main_menu())

def handle_m_settings(ctx) -> None:
    prefs = _get_prefs(ctx.user_id)
    _safe_edit_text(ctx, text="<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>", reply_markup=kb_settings_menu(prefs=prefs))

def handle_m_topics(ctx) -> None:
    _safe_edit_text(ctx, text="<b>–¢–µ–º—ã</b>", reply_markup=kb_topics_page(topics=ALL_TOPICS, page=1))

def handle_m_help(ctx) -> None:
    _safe_edit_text(ctx, text="–ü–æ–º–æ—â—å: –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ üôÇ", reply_markup=kb_main_menu())

def handle_unknown(ctx) -> None:
    _safe_edit_text(ctx, text="–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–Ω–æ–ø–∫—É ü§î", reply_markup=kb_main_menu())

# --- Play handlers ---
def start_random_single(ctx) -> None:
    HAS_RESUME[ctx.user_id] = True
    _safe_edit_text(ctx, text="üé≤ –°—Ç–∞—Ä—Ç—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å", reply_markup=kb_question_controls(has_next=True, in_series=False))

def start_series(ctx) -> None:
    HAS_RESUME[ctx.user_id] = True
    _safe_edit_text(ctx, text="üß© –°—Ç–∞—Ä—Ç —Å–µ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=kb_question_controls(has_next=True, in_series=True))

def start_daily(ctx) -> None:
    HAS_RESUME[ctx.user_id] = True
    _safe_edit_text(ctx, text="üìÜ –î–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=kb_question_controls(has_next=True, in_series=False))

def resume_series(ctx) -> None:
    _safe_edit_text(ctx, text="‚è∏ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é", reply_markup=kb_question_controls(has_next=True, in_series=True))

def start_topic_series(ctx, topic_id: str) -> None:
    LAST_TOPIC_BY_USER[ctx.user_id] = topic_id
    HAS_RESUME[ctx.user_id] = True
    title = next((t["title"] for t in ALL_TOPICS if t["id"] == topic_id), "–¢–µ–º–∞")
    _safe_edit_text(ctx, text=f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ–º—É: <b>{title}</b>", reply_markup=kb_question_controls(has_next=True, in_series=True))

def show_topics_page(ctx, page: int) -> None:
    _safe_edit_kb(ctx, reply_markup=kb_topics_page(topics=ALL_TOPICS, page=page))

# --- Settings handlers ---
def set_qcount(ctx, q: int) -> None:
    prefs = _get_prefs(ctx.user_id); prefs["qcount"] = q

def set_diff(ctx, d: str) -> None:
    prefs = _get_prefs(ctx.user_id); prefs["diff"] = d

def set_solution_mode(ctx, s: str) -> None:
    prefs = _get_prefs(ctx.user_id); prefs["sol"] = s

def refresh_settings_ui(ctx) -> None:
    prefs = _get_prefs(ctx.user_id)
    _safe_edit_kb(ctx, reply_markup=kb_settings_menu(prefs=prefs))

# --- Question flow ---
def show_solution(ctx) -> None:
    _safe_edit_text(ctx, text="üß† –†–µ—à–µ–Ω–∏–µ:\n<i>–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É...</i>", reply_markup=kb_question_controls(has_next=True, in_series=True))

def go_next(ctx) -> None:
    _safe_edit_text(ctx, text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí", reply_markup=kb_question_controls(has_next=True, in_series=True))

def finish_series(ctx) -> None:
    HAS_RESUME[ctx.user_id] = False
    topic_id = LAST_TOPIC_BY_USER.get(ctx.user_id)
    _safe_edit_text(ctx, text="–ò—Ç–æ–≥–∏ —Å–µ—Ä–∏–∏ ‚úÖ", reply_markup=kb_results(topic_id))

def confirm_skip_yes(ctx) -> None:
    _safe_edit_text(ctx, text="–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω ‚Ü∑", reply_markup=kb_question_controls(has_next=True, in_series=True))

def confirm_skip_no(ctx) -> None:
    _safe_edit_text(ctx, text="–û–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º", reply_markup=kb_question_controls(has_next=True, in_series=True))

# --- Navigation ---
def go_back(ctx) -> None:
    # –¥–ª—è –¥–µ–º–æ "–ù–∞–∑–∞–¥" = "–î–æ–º–æ–π"
    go_home(ctx)

def go_home(ctx) -> None:
    _safe_edit_text(ctx, text="<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=kb_main_menu())
